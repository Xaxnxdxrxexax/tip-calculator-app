import Head from "next/head";
import Image from "next/image";
import { useForm, SubmitHandler } from "react-hook-form";
import { useState } from "react";

type FormValues = {
  bill: number;
  people: number;
  tip: number;
};
export default function Home() {
  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors },
  } = useForm<FormValues>();
  const [customTip, setcustomTip] = useState("0");
  const [isCustomActive, setIsCustomActive] = useState(false);
  const handleTipSelection = (tipPercentage: number) => {
    setValue("tip", tipPercentage);
  };
  const currentValues = watch();
  console.log(currentValues);
  const buttonStyle =
    "bg-Fm-Very-dark-cyan hover:text-Fm-Very-dark-cyan hover:bg-Fm-Strong-cyan rounded-lg p-2 text-xl font-bold text-white hover:cursor-pointer";
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Image
          src={"images/logo.svg"}
          alt="Logo"
          width="87"
          height="54"
          className="mx-auto my-11"
        />
        <form className="flex w-full max-w-4xl flex-col gap-5 rounded-2xl bg-white p-6">
          <div>
            <label htmlFor="bill" className="text-Fm-Dark-grayish-cyan text-xl">
              Bill
            </label>
            <input
              type="number"
              step={"0.01"}
              id="bill"
              placeholder="0"
              {...register("bill", { required: true })}
              className="bg-Fm-Very-light-grayish-cyan text-Fm-Very-dark-cyan w-full rounded-lg border-[1px] p-2 text-right text-2xl font-bold"
              style={{
                backgroundImage: "url(images/icon-dollar.svg)",
                backgroundPosition: "5% center",
                backgroundRepeat: "no-repeat",
                paddingLeft: "50px",
              }}
            />
          </div>
          <label htmlFor="tip" className="text-Fm-Dark-grayish-cyan text-xl">
            Select Tip %
          </label>
          <div className="Fm:grid-cols-3 grid grid-cols-2 gap-3">
            <input type="hidden" id="tip" {...register("tip")} />
            <button
              type="button"
              className={buttonStyle}
              onClick={() => {
                handleTipSelection(0.05);
                setIsCustomActive(false);
              }}
            >
              5%
            </button>
            <button
              type="button"
              className={buttonStyle}
              onClick={() => {
                handleTipSelection(0.1);
                setIsCustomActive(false);
              }}
            >
              10%
            </button>
            <button
              type="button"
              className={buttonStyle}
              onClick={() => {
                handleTipSelection(0.15);
                setIsCustomActive(false);
              }}
            >
              15%
            </button>
            <button
              type="button"
              className={buttonStyle}
              onClick={() => {
                handleTipSelection(0.25);
                setIsCustomActive(false);
              }}
            >
              25%
            </button>
            <button
              type="button"
              className={buttonStyle}
              onClick={() => {
                handleTipSelection(0.5);
                setIsCustomActive(false);
              }}
            >
              50%
            </button>
            {isCustomActive ? (
              <input
                type="number"
                value={customTip}
                className=""
                onChange={(e) => {
                  setcustomTip(e.target.value);
                  const customTip = parseInt(e.target.value);
                  setValue("tip", customTip / 100);
                }}
              />
            ) : (
              <button
                className="text-Fm-Dark-grayish-cyan bg-Fm-Very-light-grayish-cyan hover:bg-Fm-Strong-cyan hover:text-Fm-Very-dark-cyan rounded-lg text-xl font-bold"
                onClick={() => setIsCustomActive(true)}
              >
                Custom
              </button>
            )}
          </div>
          <div>
            <label
              htmlFor="people"
              className="text-Fm-Dark-grayish-cyan text-xl"
            >
              Number of people
            </label>
            <input
              type="number"
              id="people"
              {...register("people", {
                required: true,
                min: { value: 1, message: "Must be greater than 0" },
              })}
              placeholder="0"
              className="bg-Fm-Very-light-grayish-cyan text-Fm-Very-dark-cyan w-full rounded-lg border-[1px] p-2 text-right text-2xl font-bold"
              style={{
                backgroundImage: "url(images/icon-person.svg)",
                backgroundPosition: "5% center",
                backgroundRepeat: "no-repeat",
                paddingLeft: "50px",
              }}
            />
          </div>
          <div className="bg-Fm-Very-dark-cyan rounded-lg">
            <div className="flex items-center justify-between p-4">
              <div>
                <p className="text-Fm-Very-light-grayish-cyan text-xl font-bold">
                  Tip Amount
                </p>
                <p className="text-Fm-Dark-grayish-cyan text-xl">/ person</p>
              </div>
              <p className="text-Fm-Strong-cyan text-4xl font-bold">
                ${currentValues.people}
              </p>
            </div>
          </div>
        </form>
      </main>
    </>
  );
}
